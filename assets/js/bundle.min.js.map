{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/es6/main.js","src/es6/simulation.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_simulation","$","updateSimControls","_simulation2","default","isRunning","removeClass","addClass","sliderSpeed","slider","sliderDamp","reset","sliderPertX","sliderPertY","showOverlay","hideOverlay","formatter","value","tooltip","data","setParamSpeed","newValue","setParamDamp","setParamPertX","setParamPertY","on","ev","stop","start","preventDefault","randomState","Simulation","startSim","defaultIsRunning","stopSim","resetNetwork","speed_val","damp_val","pert","x","Math","PI","m_type","simWorker","postMessage","y"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,GAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,eCAA,IAAAK,GAAAX,EAAA,sEAEAY,GAAE,WAmDA,QAASC,KACHC,EAAAC,QAAWC,aACbJ,EAAE,QACCK,YAAY,WACZC,SAAS,UACZC,EAAYC,OAAO,WACnBC,EAAWD,OAAO,aAElBR,EAAE,QACCK,YAAY,UACZC,SAAS,WACZC,EAAYC,OAAO,UACnBC,EAAWD,OAAO,WAItB,QAASE,KACPR,EAAAC,QAAWO,QACXC,EAAYH,OAAO,WAAY,IAAK,GAAM,GAC1CI,EAAYJ,OAAO,WAAY,GAAG,GAAM,GA8B1C,QAASK,KACPb,EAAE,iBAAiBM,SAAS,mBAG9B,QAASQ,KACPd,EAAE,iBAAiBK,YAAY,mBArGjC,GAAME,GAAcP,EAAE,qBAAqBQ,QACzCO,UAAW,SAAAC,GAAA,MAAYA,GAAZ,OACXC,QAAS,WAELR,EAAaT,EAAE,oBAAoBQ,QACvCO,UAAW,SAAAC,GAAA,MAASA,IACpBC,QAAS,WAGLN,EAAcX,EAAE,qBAAqBQ,QACzCO,UAAW,SAACC,GACV,MAAc,KAAVA,EACK,KACa,IAAXA,EACF,KACY,IAAVA,EACF,IAECA,EAAV,MAEFC,QAAS,WAELL,EAAcZ,EAAE,qBAAqBQ,QACzCO,UAAW,SAAAC,GAAA,MAAYA,GAAZ,OACXC,QAAS,UAGXV,GAAYC,OAAO,KAAM,SAAU,SAACU,GAClChB,EAAAC,QAAWgB,cAAcD,EAAKE,YAGhCX,EAAWD,OAAO,KAAM,SAAU,SAACU,GACjChB,EAAAC,QAAWkB,aAAaH,EAAKE,YAG/BT,EAAYH,OAAO,KAAM,SAAU,SAACU,GAClChB,EAAAC,QAAWmB,cAAcJ,EAAKE,YAGhCR,EAAYJ,OAAO,KAAM,SAAU,SAACU,GAClChB,EAAAC,QAAWoB,cAAcL,EAAKE,YA6BhCpB,EAAE,6BAA6BwB,GAAG,QAAS,SAACC,GACtCvB,EAAAC,QAAWC,YACbF,EAAAC,QAAWuB,OAEXxB,EAAAC,QAAWwB,QAEb1B,IACAwB,EAAGG,mBAGL5B,EAAE,wBAAwBwB,GAAG,QAAS,SAACC,GACrCf,IACAe,EAAGG,mBAGL5B,EAAE,yBAAyBwB,GAAG,QAAS,SAACC,GACtCvB,EAAAC,QAAW0B,cACXJ,EAAGG,mBAGLjB,EAAYH,OAAO,WAAY,IAAK,GAAM,GAC1CI,EAAYJ,OAAO,WAAY,GAAG,GAAM,GACxCP,IAaAD,EAAE,kBAAkBwB,GAAG,QAAS,SAACC,GAC/BX,IACAW,EAAGG,mBAGL5B,EAAE,uBAAuBwB,GAAG,QAAS,SAACC,GACpCZ,IACAY,EAAGG,kdCzGcE,mFAEjBC,WACAD,EAAWE,kBAAmB,iCAI9BC,UACAH,EAAWE,kBAAmB,kCAI9BE,mDAIA,MAAOJ,GAAWE,uDAGChB,GACnBmB,WAAa,IAAMnB,GAAS,GAC5BkB,oDAGkBlB,GAClBoB,SAAoB,IAARpB,EACZkB,qDAGmBlB,GACnBqB,KAAKC,GAAKtB,EAAQuB,KAAKC,EACvB,IAAMtB,IACJuB,OAAQ,aACRN,UAAAA,UACAC,SAAAA,SACAC,KAAAA,KAGFK,WAAUC,YAAYzB,yCAGHF,GACnBqB,KAAKO,GAAK5B,CACV,IAAME,IACJuB,OAAQ,aACRN,UAAAA,UACAC,SAAAA,SACAC,KAAAA,KAGFK,WAAUC,YAAYzB,sJAItBW,kCAtDiBC,EA2DrBA,EAAWE,kBAAmB","file":"bundle.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import Simulation from './simulation';\n\n$(() => {\n  /**\n   * Setup sliders\n   */\n  const sliderSpeed = $('.slider#speed_val').slider({\n    formatter: value => `${value} Hz`,\n    tooltip: 'always',\n  });\n  const sliderDamp = $('.slider#damp_val').slider({\n    formatter: value => value,\n    tooltip: 'always',\n  });\n\n  const sliderPertX = $('.slider#xpert_val').slider({\n    formatter: (value) => {\n      if (value === 1) {\n        return 'π';\n      } else if (value === -1) {\n        return '-π';\n      } else if (value === 0) {\n        return '0';\n      }\n      return `${value} π`;\n    },\n    tooltip: 'always',\n  });\n  const sliderPertY = $('.slider#ypert_val').slider({\n    formatter: value => `${value} Hz`,\n    tooltip: 'always',\n  });\n\n  sliderSpeed.slider('on', 'change', (data) => {\n    Simulation.setParamSpeed(data.newValue);\n  });\n\n  sliderDamp.slider('on', 'change', (data) => {\n    Simulation.setParamDamp(data.newValue);\n  });\n\n  sliderPertX.slider('on', 'change', (data) => {\n    Simulation.setParamPertX(data.newValue);\n  });\n\n  sliderPertY.slider('on', 'change', (data) => {\n    Simulation.setParamPertY(data.newValue);\n  });\n\n  /**\n   * Sim controls\n   *\n   */\n  function updateSimControls() {\n    if (Simulation.isRunning()) {\n      $('body')\n        .removeClass('sim-off')\n        .addClass('sim-on');\n      sliderSpeed.slider('disable');\n      sliderDamp.slider('disable');\n    } else {\n      $('body')\n        .removeClass('sim-on')\n        .addClass('sim-off');\n      sliderSpeed.slider('enable');\n      sliderDamp.slider('enable');\n    }\n  }\n\n  function reset() {\n    Simulation.reset();\n    sliderPertX.slider('setValue', 0.1, true, true);\n    sliderPertY.slider('setValue', 1, true, true);\n  }\n\n  $('[data-control=play-pause]').on('click', (ev) => {\n    if (Simulation.isRunning()) {\n      Simulation.stop();\n    } else {\n      Simulation.start();\n    }\n    updateSimControls();\n    ev.preventDefault();\n  });\n\n  $('[data-control=reset]').on('click', (ev) => {\n    reset();\n    ev.preventDefault();\n  });\n\n  $('[data-control=random]').on('click', (ev) => {\n    Simulation.randomState();\n    ev.preventDefault();\n  });\n\n  sliderPertX.slider('setValue', 0.1, true, true);\n  sliderPertY.slider('setValue', 1, true, true);\n  updateSimControls();\n\n  /**\n   * Overlay\n   */\n  function showOverlay() {\n    $('.overlay-info').addClass('overlay-visible');\n  }\n\n  function hideOverlay() {\n    $('.overlay-info').removeClass('overlay-visible');\n  }\n\n  $('.overlay-close').on('click', (ev) => {\n    hideOverlay();\n    ev.preventDefault();\n  });\n\n  $('[data-control=info]').on('click', (ev) => {\n    showOverlay();\n    ev.preventDefault();\n  });\n});\n","/* global simWorker, startSim, stopSim, resetNetwork, speed_val, damp_val, pert, randomState */\n\n/**\n * Interface for encapsulating global/dirty calls to the original simulation code\n * without modifying it.\n *\n * NOTE: Right now the simulation produces no events if it's stopped and provides no way\n * to know if it's running, both of which would be necessary to correctly implement this\n * control. However, the internal variable that indicates if it's running is only modified\n * through calling the stop/start functions that are only called through the original\n * buttons being replaced. But let's be careful with that...\n */\nexport default class Simulation {\n  static start() {\n    startSim();\n    Simulation.defaultIsRunning = true;\n  }\n\n  static stop() {\n    stopSim();\n    Simulation.defaultIsRunning = false;\n  }\n\n  static reset() {\n    resetNetwork();\n  }\n\n  static isRunning() {\n    return Simulation.defaultIsRunning;\n  }\n\n  static setParamSpeed(value) {\n    speed_val = (50 - +value) / 10; // eslint-disable-line\n    resetNetwork();\n  }\n\n  static setParamDamp(value) {\n    damp_val = +value * 10; // eslint-disable-line\n    resetNetwork();\n  }\n\n  static setParamPertX(value) {\n    pert.x = +value * Math.PI;\n    const data = {\n      m_type: 'parameters',\n      speed_val,\n      damp_val,\n      pert,\n    };\n    // send data\n    simWorker.postMessage(data);\n  }\n\n  static setParamPertY(value) {\n    pert.y = +value;\n    const data = {\n      m_type: 'parameters',\n      speed_val,\n      damp_val,\n      pert,\n    };\n    // send data\n    simWorker.postMessage(data);\n  }\n\n  static randomState() {\n    randomState();\n  }\n}\n\n// Simulation starts on\nSimulation.defaultIsRunning = true;\n"]}